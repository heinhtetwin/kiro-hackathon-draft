"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import {
  AlertTriangle,
  Package,
  ExternalLink,
  ChevronDown,
  ChevronRight,
  Calendar,
  Shield,
  Clock,
  RefreshCw,
  EyeOff,
} from "lucide-react"

interface Vulnerability {
  id: string
  severity: string
  title: string
  description: string
  affectedVersions: string
  fixedVersion: string
  publishedDate: string
  cvssScore: number
}

interface Dependency {
  id: string
  name: string
  version: string
  latestVersion: string
  type?: string
  vulnerabilities: Vulnerability[]
  outdated: boolean
  description?: string
  dependencies?: Dependency[]
}

interface VulnerabilityCardProps {
  dependency: Dependency
  selected: boolean
  onSelect: (checked: boolean) => void
}

export function VulnerabilityCard({ dependency, selected, onSelect }: VulnerabilityCardProps) {
  const [expandedVulns, setExpandedVulns] = useState<Set<string>>(new Set())

  const toggleVulnExpanded = (vulnId: string) => {
    const newExpanded = new Set(expandedVulns)
    if (newExpanded.has(vulnId)) {
      newExpanded.delete(vulnId)
    } else {
      newExpanded.add(vulnId)
    }
    setExpandedVulns(newExpanded)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500 text-white"
      case "high":
        return "bg-orange-500 text-white"
      case "medium":
        return "bg-yellow-500 text-white"
      case "low":
        return "bg-blue-500 text-white"
      default:
        return "bg-gray-500 text-white"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertTriangle className="h-3 w-3" />
      case "high":
        return <AlertTriangle className="h-3 w-3" />
      case "medium":
        return <Clock className="h-3 w-3" />
      case "low":
        return <Shield className="h-3 w-3" />
      default:
        return <Shield className="h-3 w-3" />
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    })
  }

  const allVulnerabilities = [
    ...dependency.vulnerabilities,
    ...(dependency.dependencies?.flatMap((dep) => dep.vulnerabilities || []) || []),
  ]

  const hasVulnerabilities = allVulnerabilities.length > 0

  return (
    <Card className={`transition-all ${selected ? "border-blue-500 bg-blue-50 dark:bg-blue-950/20" : ""}`}>
      <CardHeader>
        <div className="flex items-start justify-between">
          <div className="flex items-start gap-3">
            <Checkbox checked={selected} onCheckedChange={onSelect} className="mt-1" />
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-2">
                <Package className="h-4 w-4 text-slate-600" />
                <CardTitle className="text-lg">{dependency.name}</CardTitle>
                <Badge variant="outline">{dependency.version}</Badge>
                {dependency.type && (
                  <Badge variant={dependency.type === "production" ? "default" : "secondary"}>{dependency.type}</Badge>
                )}
                {dependency.outdated && (
                  <Badge variant="outline" className="text-yellow-600 border-yellow-600">
                    <Clock className="w-3 h-3 mr-1" />
                    Update to {dependency.latestVersion}
                  </Badge>
                )}
              </div>
              <CardDescription>{dependency.description}</CardDescription>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {dependency.outdated && (
              <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                <RefreshCw className="w-4 h-4 mr-2" />
                Update Now
              </Button>
            )}
            <Button variant="ghost" size="sm">
              <ExternalLink className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      {hasVulnerabilities && (
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="font-semibold text-red-600 flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" />
                {allVulnerabilities.length} Vulnerabilit{allVulnerabilities.length !== 1 ? "ies" : "y"} Found
              </h4>
              <Button variant="outline" size="sm">
                <EyeOff className="w-4 h-4 mr-2" />
                Ignore All
              </Button>
            </div>

            <div className="space-y-3">
              {allVulnerabilities.map((vuln) => (
                <Collapsible key={vuln.id}>
                  <div className="border rounded-lg p-4 space-y-3">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {getSeverityIcon(vuln.severity)}
                            <span className="ml-1 capitalize">{vuln.severity}</span>
                          </Badge>
                          <Badge variant="outline" className="font-mono text-xs">
                            {vuln.id}
                          </Badge>
                          <span className="text-sm text-slate-600 dark:text-slate-400">CVSS: {vuln.cvssScore}</span>
                        </div>
                        <h5 className="font-semibold text-slate-900 dark:text-white mb-1">{vuln.title}</h5>
                        <p className="text-sm text-slate-600 dark:text-slate-300 line-clamp-2">{vuln.description}</p>
                      </div>
                      <CollapsibleTrigger asChild>
                        <Button variant="ghost" size="sm" onClick={() => toggleVulnExpanded(vuln.id)}>
                          {expandedVulns.has(vuln.id) ? (
                            <ChevronDown className="h-4 w-4" />
                          ) : (
                            <ChevronRight className="h-4 w-4" />
                          )}
                        </Button>
                      </CollapsibleTrigger>
                    </div>

                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-4 text-slate-600 dark:text-slate-400">
                        <span>Affected: {vuln.affectedVersions}</span>
                        <span>Fixed in: {vuln.fixedVersion}</span>
                        <span className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          {formatDate(vuln.publishedDate)}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button size="sm" variant="outline">
                          <EyeOff className="w-3 h-3 mr-1" />
                          Ignore
                        </Button>
                        <Button size="sm" className="bg-green-600 hover:bg-green-700">
                          Fix Available
                        </Button>
                      </div>
                    </div>

                    <CollapsibleContent>
                      <div className="pt-3 border-t space-y-3">
                        <div>
                          <h6 className="font-semibold text-sm mb-2">Full Description</h6>
                          <p className="text-sm text-slate-600 dark:text-slate-300">{vuln.description}</p>
                        </div>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="font-semibold">Affected Versions:</span>
                            <p className="text-slate-600 dark:text-slate-400">{vuln.affectedVersions}</p>
                          </div>
                          <div>
                            <span className="font-semibold">Fixed Version:</span>
                            <p className="text-slate-600 dark:text-slate-400">{vuln.fixedVersion}</p>
                          </div>
                          <div>
                            <span className="font-semibold">CVSS Score:</span>
                            <p className="text-slate-600 dark:text-slate-400">{vuln.cvssScore}/10</p>
                          </div>
                          <div>
                            <span className="font-semibold">Published:</span>
                            <p className="text-slate-600 dark:text-slate-400">{formatDate(vuln.publishedDate)}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2 pt-2">
                          <Button size="sm" variant="outline">
                            <ExternalLink className="w-3 h-3 mr-1" />
                            View CVE Details
                          </Button>
                          <Button size="sm" variant="outline">
                            <ExternalLink className="w-3 h-3 mr-1" />
                            View on GitHub Advisory
                          </Button>
                        </div>
                      </div>
                    </CollapsibleContent>
                  </div>
                </Collapsible>
              ))}
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  )
}
